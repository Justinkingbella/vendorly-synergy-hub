
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { PostgrestQueryBuilder } from '@supabase/postgrest-js';

const SUPABASE_URL = "https://qkzjmedpwqskvbqwtujr.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFremptZWRwd3Fza3ZicXd0dWpyIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDM1MTcyNjAsImV4cCI6MjA1OTA5MzI2MH0.iFChdfKR_KIix9V3Ltx6qcj4q8w4P-OvaK-0pTHVFHc";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Type definition helper functions
export type Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];
export type InsertTables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Insert'];
export type UpdateTables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Update'];

// Custom type definitions for tables not yet in types.ts
// These will be used until the types.ts file is regenerated with the new tables

// Interface for store_theme_settings table
export interface StoreThemeSettingsRow {
  id: string;
  mode: 'light' | 'dark' | 'system';
  primary_color: string;
  secondary_color: string;
  accent_color: string;
  font_family: string;
  border_radius: string;
  custom_css?: string;
  created_at: string;
  updated_at: string;
}

export interface StoreThemeSettingsInsert {
  id?: string;
  mode?: 'light' | 'dark' | 'system';
  primary_color?: string;
  secondary_color?: string;
  accent_color?: string;
  font_family?: string;
  border_radius?: string;
  custom_css?: string;
  created_at?: string;
  updated_at?: string;
}

// Interface for subscription_plans table
export interface SubscriptionPlanRow {
  id: string;
  name: string;
  price: number;
  description?: string;
  popular?: boolean;
  features: string[];
  not_included: string[];
  created_at: string;
  updated_at: string;
}

export interface SubscriptionPlanInsert {
  id?: string;
  name: string;
  price: number;
  description?: string;
  popular?: boolean;
  features?: string[];
  not_included?: string[];
  created_at?: string;
  updated_at?: string;
}

// Type-safe standard app_settings table functions 
export const appSettingsTable = () => {
  const query = supabase.from('app_settings');
  
  return {
    select: (columns = '*') => query.select(columns),
    insert: (values: InsertTables<'app_settings'>) => query.insert(values),
    update: (values: UpdateTables<'app_settings'>) => query.update(values),
    delete: () => query.delete(),
    eq: (column: string, value: any) => query.eq(column, value),
    single: () => query.single(),
    order: (column: string, options?: { ascending?: boolean }) => query.order(column, options),
    limit: (count: number) => query.limit(count),
  };
};
export type AppSetting = Tables<'app_settings'>;
export type InsertAppSetting = InsertTables<'app_settings'>;
export type UpdateAppSetting = UpdateTables<'app_settings'>;

// Custom wrapper for subscription_plans table
export const subscriptionPlansTable = () => {
  const table = 'subscription_plans';
  
  return {
    select: (columns = '*') => supabase.from(table).select(columns),
    insert: (values: SubscriptionPlanInsert | SubscriptionPlanInsert[]) => {
      if (Array.isArray(values)) {
        return supabase.from(table).insert(values);
      }
      return supabase.from(table).insert(values);
    },
    update: (values: Partial<SubscriptionPlanInsert>) => supabase.from(table).update(values),
    delete: () => supabase.from(table).delete(),
    eq: (column: string, value: any) => supabase.from(table).eq(column, value),
    single: () => supabase.from(table).single(),
    order: (column: string, options?: { ascending?: boolean }) => 
      supabase.from(table).order(column, options),
    limit: (count: number) => supabase.from(table).limit(count),
  };
};
export type SubscriptionPlan = SubscriptionPlanRow;

// Custom wrapper for store_theme_settings table
export const storeThemeSettingsTable = () => {
  const table = 'store_theme_settings';
  
  return {
    select: (columns = '*') => supabase.from(table).select(columns),
    insert: (values: StoreThemeSettingsInsert | StoreThemeSettingsInsert[]) => {
      if (Array.isArray(values)) {
        return supabase.from(table).insert(values);
      }
      return supabase.from(table).insert(values);
    },
    update: (values: Partial<StoreThemeSettingsInsert>) => supabase.from(table).update(values),
    delete: () => supabase.from(table).delete(),
    eq: (column: string, value: any) => supabase.from(table).eq(column, value),
    single: () => supabase.from(table).single(),
    order: (column: string, options?: { ascending?: boolean }) => 
      supabase.from(table).order(column, options),
    limit: (count: number) => supabase.from(table).limit(count),
  };
};
export type StoreThemeSetting = StoreThemeSettingsRow;
